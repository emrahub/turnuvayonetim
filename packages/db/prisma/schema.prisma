generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuditLog {
  id         String   @id
  userId     String?
  action     String
  entityType String
  entityId   String
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([entityType, entityId])
  @@index([userId])
}

model BlindLevel {
  id              String         @id
  structureId     String
  idx             Int
  smallBlind      Int
  bigBlind        Int
  ante            Int            @default(0)
  durationSeconds Int            @default(900)
  isBreak         Boolean        @default(false)
  breakName       String?
  BlindStructure  BlindStructure @relation(fields: [structureId], references: [id], onDelete: Cascade)

  @@unique([structureId, idx])
}

model BlindStructure {
  id           String       @id
  tournamentId String       @unique
  name         String?
  description  String?
  BlindLevel   BlindLevel[]
  Tournament   Tournament   @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model ClockState {
  id              String     @id
  tournamentId    String
  currentLevelIdx Int        @default(0)
  status          String     @default("idle")
  levelStartTime  BigInt
  pausedDuration  BigInt     @default(0)
  serverTime      BigInt
  createdAt       DateTime   @default(now())
  Tournament      Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model Display {
  id           String      @id
  tournamentId String
  name         String
  pin          String?
  type         DisplayType
  config       Json?
  lastPing     DateTime?
  Tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, pin])
}

model Elimination {
  id           String     @id
  tournamentId String
  entryId      String
  place        Int
  eliminatedBy String?
  eliminatedAt DateTime   @default(now())
  Entry        Entry      @relation(fields: [entryId], references: [id], onDelete: Cascade)
  Tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model Entry {
  id           String        @id
  tournamentId String
  playerId     String?
  displayName  String
  tableId      String?
  seatNumber   Int?
  chipCount    Int           @default(0)
  status       EntryStatus   @default(REGISTERED)
  position     Int?
  registeredAt DateTime      @default(now())
  eliminatedAt DateTime?
  Elimination  Elimination[]
  Player       Player?       @relation(fields: [playerId], references: [id])
  Table        Table?        @relation(fields: [tableId], references: [id])
  Tournament   Tournament    @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  Seat         Seat?
  Transaction  Transaction[]
}

model Event {
  id             String   @id
  organizationId String
  aggregateId    String
  aggregateType  String
  eventType      String
  eventData      Json
  metadata       Json?
  version        Int
  timestamp      DateTime @default(now())
  createdAt      DateTime @default(now())
  tournamentId   String?
  tableId        String?
  userId         String?

  @@index([aggregateId, aggregateType])
  @@index([eventType])
  @@index([organizationId])
  @@index([organizationId, tournamentId])
  @@index([timestamp])
  @@index([tournamentId])
}

model HandHistory {
  id           String   @id
  tournamentId String
  tableId      String?
  handNumber   Int
  timestamp    DateTime @default(now())
  players      Json     // [{id, name, position, chips}]
  actions      Json     // [{type, player, amount, timestamp}]
  board        Json?    // Community cards
  winners      Json?    // [{playerId, amount}]
  potSize      Int?
  metadata     Json?    // Additional data (dealer position, etc.)

  @@index([tournamentId])
  @@index([tournamentId, handNumber])
  @@index([timestamp])
}

model PlayerStatistics {
  id                String   @id
  playerId          String   @unique
  totalTournaments  Int      @default(0)
  wins              Int      @default(0)
  cashes            Int      @default(0)
  totalBuyins       Int      @default(0)
  totalWinnings     Int      @default(0)
  avgFinishPosition Float?
  bestFinish        Int?
  worstFinish       Int?
  handsPlayed       Int      @default(0)
  vpip              Float?   // Voluntarily Put money In Pot %
  pfr               Float?   // Pre-Flop Raise %
  aggression        Float?   // Aggression factor
  lastPlayed        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime

  @@index([totalWinnings])
  @@index([wins])
  @@index([totalTournaments])
}

model League {
  id             String           @id
  organizationId String
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  scoringSystem  Json
  createdAt      DateTime         @default(now())
  Organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  LeagueEvent    LeagueEvent[]
  LeagueStanding LeagueStanding[]
}

model LeagueEvent {
  id               String     @id
  leagueId         String
  tournamentId     String
  pointsMultiplier Float      @default(1.0)
  League           League     @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  Tournament       Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([leagueId, tournamentId])
}

model LeagueStanding {
  id        String   @id
  leagueId  String
  playerId  String
  points    Int      @default(0)
  events    Int      @default(0)
  wins      Int      @default(0)
  cashes    Int      @default(0)
  updatedAt DateTime
  League    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([leagueId, playerId])
}

model Organization {
  id               String             @id
  name             String
  slug             String             @unique
  logoUrl          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  League           League[]
  Template         Template[]
  Tournament       Tournament[]
  UserOrganization UserOrganization[]
}

model Payout {
  id           String     @id
  tournamentId String
  place        Int
  amount       Int
  percentage   Float?
  paid         Boolean    @default(false)
  paidAt       DateTime?
  Tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, place])
}

model Player {
  id        String   @id
  firstName String?
  lastName  String?
  nickname  String?
  email     String?  @unique
  phone     String?
  photoUrl  String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Entry     Entry[]
}

model Seat {
  id         String  @id
  tableId    String
  seatNumber Int
  entryId    String? @unique
  Entry      Entry?  @relation(fields: [entryId], references: [id])
  Table      Table   @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, seatNumber])
}

model Session {
  id        String   @id
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Snapshot {
  id             String   @id
  organizationId String
  aggregateId    String
  aggregateType  String
  version        Int
  data           Json
  createdAt      DateTime @default(now())

  @@unique([organizationId, aggregateId])
  @@index([aggregateId, version])
  @@index([organizationId, aggregateId])
  @@index([organizationId])
}

model Table {
  id           String      @id
  tournamentId String
  tableNumber  Int
  maxSeats     Int         @default(9)
  status       TableStatus @default(ACTIVE)
  createdAt    DateTime    @default(now())
  Entry        Entry[]
  Seat         Seat[]
  Tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, tableNumber])
}

model Template {
  id             String       @id
  organizationId String
  name           String
  type           TemplateType
  data           Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Tournament {
  id              String           @id
  organizationId  String
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime?
  status          TournamentStatus @default(SCHEDULED)
  buyIn           Int              @default(0)
  rebuyAllowed    Boolean          @default(false)
  rebuyAmount     Int              @default(0)
  addonAllowed    Boolean          @default(false)
  addonAmount     Int              @default(0)
  startingStack   Int              @default(10000)
  maxPlayers      Int?
  lateRegMinutes  Int              @default(0)
  guaranteedPrize Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  BlindStructure  BlindStructure?
  ClockState      ClockState[]
  Display         Display[]
  Elimination     Elimination[]
  Entry           Entry[]
  LeagueEvent     LeagueEvent[]
  Payout          Payout[]
  Table           Table[]
  Organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Transaction     Transaction[]
}

model Transaction {
  id           String          @id
  tournamentId String
  entryId      String
  type         TransactionType
  amount       Int
  createdAt    DateTime        @default(now())
  Entry        Entry           @relation(fields: [entryId], references: [id], onDelete: Cascade)
  Tournament   Tournament      @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id
  email            String             @unique
  passwordHash     String
  firstName        String?
  lastName         String?
  avatarUrl        String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  AuditLog         AuditLog[]
  Session          Session[]
  UserOrganization UserOrganization[]
}

model UserOrganization {
  id             String       @id
  userId         String
  organizationId String
  role           Role         @default(STAFF)
  joinedAt       DateTime     @default(now())
  Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

enum UserRole {
  ADMIN
  MANAGER
  DEALER
  PLAYER
  VIEWER
}

enum TournamentType {
  FREEZEOUT
  REBUY
  ADDON
  SATELLITE
  SIT_AND_GO
  HEADS_UP
  BOUNTY
  PROGRESSIVE_BOUNTY
}

enum TournamentStatus {
  SCHEDULED
  REGISTERING
  LIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum TableStatus {
  ACTIVE
  BREAKING
  BROKEN
}

enum EntryStatus {
  REGISTERED
  ACTIVE
  ELIMINATED
  WITHDRAWN
}

enum PayoutStatus {
  PENDING
  APPROVED
  PAID
  CANCELLED
}

enum DisplayType {
  CLOCK
  SEATING
  STANDINGS
  PAYOUTS
}

enum Role {
  OWNER
  ADMIN
  DIRECTOR
  STAFF
  DISPLAY
}

enum TemplateType {
  BLIND_STRUCTURE
  PAYOUT_STRUCTURE
  TOURNAMENT_SETTINGS
}

enum TransactionType {
  BUYIN
  REBUY
  ADDON
  CASHOUT
}
